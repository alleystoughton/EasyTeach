(* RedundantHashing.eca *)

(* Redundant Hashing *)

(* This abstract theory implements random oracles with procedures for
   ordinary and redundant hashing (as well as an initialization
   procedure).

   There are two implementations:

     A "non-optimized" one, in which redundant hashing works just like
     ordinary hashing (and using the same map), but the hashing results
     are discarded.

     An "optimized" one in which redundant hashing does nothing.

   The main lemma allows one to go back and forth between these
   two implementations, as long as one only cares about an overall
   boolean result. *)

prover quorum=2 ["Alt-Ergo" "Z3"].  (* both Alt-Ergo and Z3 must succeed *)

(***************************** Standard Theories ******************************)

require import AllCore Distr FSet FMap List.
require IterProc.

(***************************** Auxiliary Theories *****************************)

require import ListAux.
require import FSetAux.

(***************************** Theory Parameters ******************************)

type input.  (* type of oracle inputs *)

type output.  (* type of oracle outputs *)

(* lossless distribution on outputs *)

op doutput : output distr.

axiom doutput_ll : is_lossless doutput.

(************************** End of Theory Parameters **************************)

(* Hashing Oracles *)

module type HASHING = {
  (* initialization *)

  proc init() : unit

  (* ordinary hashing *)

  proc hash(inp : input) : output

  (* redundant hashing - result ignored *)

  proc rhash(inp : input) : unit
}.

(* non-optimized implementation of Hashing Oracle *)

module NonOptHashing : HASHING = {
  var mp : (input, output) fmap

  proc init() : unit = {
    mp <- empty;
  }

  proc hash(inp : input) : output = {
    var out : output;
    if (! dom mp inp) {
      out <$ doutput;      
      mp.[inp] <- out;
    }
    return oget mp.[inp];
  }

  proc rhash(inp : input) : unit = {
    hash(inp);
  }
}.

(* optimized implementation of Hashing Oracle *)

module OptHashing : HASHING = {
  var mp : (input, output) fmap

  proc init() : unit = {
    mp <- empty;
  }

  proc hash(inp : input) : output = {
    var out : output;
    if (! dom mp inp) {
      out <$ doutput;
      mp.[inp] <- out;
    }
    return oget mp.[inp];
  }

  proc rhash(inp : input) : unit = { }
}.

(* Hashing Adversary *)

module type HASHING_ADV (H : HASHING) = {
  proc main() : bool {H.hash, H.rhash}
}.

(* games based on the two implementations of hashing *)

module GNonOptHashing (HashAdv : HASHING_ADV) = {
  module HA = HashAdv(NonOptHashing)

  proc main() : bool = {
    var b : bool;
    NonOptHashing.init();
    b <@ HA.main();
    return b;
  }
}.

module GOptHashing (HashAdv : HASHING_ADV) = {
  module HA = HashAdv(OptHashing)

  proc main() : bool = {
    var b : bool;
    OptHashing.init();
    b <@ HA.main();
    return b;
  }
}.

(* see end of section for main lemma *)

section.

(* our proof uses EasyCrypt's eager tactics, but the idea behind the
   proof is simple: we can repeatedly postpone redundant hashing,
   until the point when it is (non-redundantly) hashed or the hashing
   adversary has already returned its boolean result (and so oracle
   map equality is no longer of interest) *)

declare module HashAdv <: HASHING_ADV{-NonOptHashing, -OptHashing}.

(* so we can use iteration over inputs *)

local clone include IterProc with type t <- input
proof *.
(* nothing to realize *)

(* we use two extended hashing modules, one non-optimized, one
   optimized

   the latter uses the variables of the former, as this is needed
   by one of EasyCrypt's eager tactics

   the variables of the former are the oracle's map, plus a record of
   which inputs are *redundant* - i.e., have been supplied to rhash
   but not to hash *)

(* non-optimized implementation, NOH *)

module type NOH_extra = {
  (* rehash redundant inputs

     in NOH, this will really be rehashing (as opposed to hashing of
     inputs not in the domain of the map); but when this procedure is
     used in OH (see below), it will be hashing for the first time *)

  proc rehash_red_inps() : unit

  (* rehash redundant inputs, and then look up value of inp *)

  proc rehash_red_inps_rslt(inp : input) : output

  (* rehash inp *after* rehashing redundant inputs, returning value of
     inp *)

  proc rehash_red_inps_addl_after(inp : input) : output
}.

local module NOH : HASHING, NOH_extra = {
  var mp : (input, output) fmap
  var red_inps : input fset

  proc init() : unit = {
    mp <- empty; red_inps <- fset0;
  }

  proc hash(inp : input) : output = {
    var out : output;
    if (! dom mp inp) {
      out <$ doutput;
      mp.[inp] <- out;
    }
    else {
      (* if inp was redundant it's no longer so *)
      red_inps <- red_inps `\` fset1 inp;
    }
    return oget mp.[inp];
  }

  proc rhash(inp : input) : unit = {
    var out : output;
    if (! dom mp inp) {
      out <$ doutput;
      mp.[inp] <- out;
      (* inp is redundant *)
      red_inps <- red_inps `|` fset1 inp;
    }
  }

  module I = {
    proc f (inp : input) = {
      var out : output;
      out <$ doutput;
      mp.[inp] <- out;
    }
  }

  proc rehash_red_inps() = {
    Iter(I).iter(elems red_inps);
  }

  proc rehash_red_inps_rslt(inp : input) : output = {
    var out : output;
    rehash_red_inps();
    out <- oget mp.[inp];
    return out;
  }

  proc rehash_red_inps_addl_after(inp : input) : output = {
    var out : output;
    rehash_red_inps();
    out <$ doutput;  (* after *)
    mp.[inp] <- out;
    out <- oget mp.[inp];
    return out;
  }
}.

(* optimized implementation, OH *)

module type OH_extra = {
  (* rehash inp *before* rehashing redundant inputs, returning
     value of inp (obtained immediately after hashing it) *)

  proc rehash_red_inps_addl_before(inp : input) : output
}.

local module OH : HASHING, OH_extra = {
  proc init = NOH.init

  proc hash(inp : input) : output = {
    var out : output;
    (* the second disjunct is needed for the proof of
       lemma eager_hash, because there we can't use
       the invariant:

       forall inp', mem red_inps inp' => ! dom mp inp' *)
    if (! dom NOH.mp inp \/ mem NOH.red_inps inp) {
      out <$ doutput;
      NOH.mp.[inp] <- out;
      NOH.red_inps <- NOH.red_inps `\` fset1 inp;
    }
    return oget NOH.mp.[inp];
  }

  proc rhash(inp : input) : unit = {
    if (! dom NOH.mp inp) {
      NOH.red_inps <- NOH.red_inps `|` fset1 inp;
    }
  }

  proc rehash_red_inps_addl_before(inp : input) : output = {
    var out : output;
    out <$ doutput;  (* before *)
    NOH.mp.[inp] <- out;
    out <- oget NOH.mp.[inp];
    NOH.rehash_red_inps();
    return out;
  }
}.

local lemma NOH_rehash_red_inps_ll :
  islossless NOH.rehash_red_inps.
proof.
proc.
call (iter_ll NOH.I _).
proc; auto; progress; apply doutput_ll.
auto.
qed.

local lemma NOH_rehash_red_inps_empty_preserves_map mp':
  phoare
  [NOH.rehash_red_inps :
   NOH.mp = mp' /\ NOH.red_inps = fset0 ==>
   NOH.mp = mp'] = 1%r.
proof.
proc.
inline*.
seq 1 : (l = [] /\ NOH.mp = mp'); first auto.
auto; smt(elems_fset0).
rcondf 1; auto.
hoare; auto; smt(elems_fset0).
trivial.
qed.

(* games based on the two extended hashing implementations,
   where adversary only gets access to hash and rhash *)

local module GNOH = {
  module HA = HashAdv(NOH)

  proc main() : bool = {
    var b : bool;
    NOH.init();
    b <@ HA.main();
    return b;
  }
}.

local module GOH = {
  module HA = HashAdv(OH)

  proc main() : bool = {
    var b : bool;
    OH.init();
    b <@ HA.main();
    return b;
  }
}.

(* moving from NonOptHashing to NOH *)

local lemma NonOptHashing_NOH_hash :
  equiv
  [NonOptHashing.hash ~ NOH.hash :
   ={inp} /\ ={mp}(NonOptHashing, NOH) ==>
   ={res} /\ ={mp}(NonOptHashing, NOH)].
proof.
proc; if => //; auto.
qed.

local lemma NonOptHashing_NOH_rhash :
  equiv
  [NonOptHashing.rhash ~ NOH.rhash :
   ={inp} /\ ={mp}(NonOptHashing, NOH) ==>
   ={res} /\ ={mp}(NonOptHashing, NOH)].
proof.
proc; inline NonOptHashing.hash; sp.
if => //; auto.
qed.

local lemma GNonOptHashing_GNOH &m :
  Pr[GNonOptHashing(HashAdv).main() @ &m : res] = Pr[GNOH.main() @ &m : res].
proof.
byequiv => //.
proc; inline NonOptHashing.init NOH.init.
seq 1 2 : (={glob HashAdv} /\ ={mp}(NonOptHashing, NOH)).   
auto.
call (_ : ={mp}(NonOptHashing, NOH)).
apply NonOptHashing_NOH_hash.
apply NonOptHashing_NOH_rhash.
auto.
qed.

(* moving from OH to OptHashing *)

local lemma OH_OptHashing_hash :
  equiv
  [OH.hash ~ OptHashing.hash:
   ={inp} /\ ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp') ==>
   ={res} /\ ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp')].
proof.
proc.
if.
smt().
auto; progress;
  rewrite -mem_fdom fdom_set in_fsetU1 negb_or; smt(in_fsetD1 mem_fdom).
auto.
qed.

local lemma OH_OptHashing_rhash :
  equiv
  [OH.rhash ~ OptHashing.rhash:
   ={inp} /\ ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp') ==>
   ={res} /\ ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp')].
proof.
proc; auto; progress; smt(fdom_set mem_fdom in_fsetU1 in_fsetD1).
qed.

local lemma GOH_GOptHashing &m :
  Pr[GOH.main() @ &m : res] = Pr[GOptHashing(HashAdv).main() @ &m : res].
proof.
byequiv => //.
proc; inline OH.init OptHashing.init.
seq 2 1 :
  (={glob HashAdv} /\ ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp')).
auto; smt(in_fset0).
call
  (_ :
   ={mp}(NOH, OptHashing) /\
   (forall (inp' : input),
    mem NOH.red_inps{1} inp' => ! dom NOH.mp{1} inp')).
apply OH_OptHashing_hash.
apply OH_OptHashing_rhash.
auto.
qed.

(* middle step of sequence of games *)

local lemma NOH_rehash_red_inps_red_dom (inp' : input) :
  hoare
  [NOH.rehash_red_inps :
   mem NOH.red_inps inp' ==> dom NOH.mp inp'].
proof.
proc; inline*; sp.
while (mem l inp' \/ dom NOH.mp inp').
auto; progress;
  rewrite -mem_fdom fdom_set in_fsetU1; smt(mem_fdom mem_ne_list_drop1).
auto => /> &hr; rewrite memE /#.
qed.

local lemma NOH_rehash_red_inps_not_red_not_dom (inp' : input) :
  hoare
  [NOH.rehash_red_inps :
   ! mem NOH.red_inps inp' /\ ! dom NOH.mp inp' ==>
   ! dom NOH.mp inp'].
proof.
proc; inline*; sp.
while (! mem l inp' /\ ! dom NOH.mp inp').
auto; progress;
  [smt(mem_ne_list_drop1) |
   rewrite -mem_fdom fdom_set in_fsetU1 mem_fdom;
   smt(mem_ne_list_drop1)].
auto; smt(memE).
qed.

local lemma NOH_rehash_red_inps_pres_dom (inp' : input) :
  hoare
  [NOH.rehash_red_inps :
   dom NOH.mp inp' ==> dom NOH.mp inp'].
proof.
proc; inline*; sp.
while (dom NOH.mp inp').
auto; progress.
rewrite -mem_fdom fdom_set in_fsetU1 mem_fdom /#.
auto.
qed.

local lemma NOH_OH_rehash_red_inps_not_red_pres
            (inp : input, out : output) :
  equiv
  [NOH.rehash_red_inps ~ NOH.rehash_red_inps :
   ={NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp /\
   NOH.mp{1}.[inp] = Some out ==>
   NOH.mp{1} = NOH.mp{2} /\ NOH.mp{1}.[inp] = Some out].
proof.
proc; inline*; sp.
while
  (={l} /\ ={NOH.mp} /\
   ! mem l{1} inp /\ NOH.mp{1}.[inp] = Some out).
auto; progress; [smt(mem_drop) | smt(mem_ne_list_drop1 get_setE)].
auto; smt(memE).
qed.

local lemma NOH_OH_rehash_red_inps_addl_not_red :
  equiv
  [NOH.rehash_red_inps_addl_after ~ OH.rehash_red_inps_addl_before :
   ={inp} /\ ={NOH.mp, NOH.red_inps} /\
   ! mem NOH.red_inps{1} inp{1} ==>
  ={res} /\ ={NOH.mp}].
proof.
proc.
swap{1} 2 -1.
seq 1 1 : 
  (={inp, out} /\ ={NOH.mp, NOH.red_inps} /\
   ! mem NOH.red_inps{1} inp{1}); first auto.
inline*; swap{2} 3 -2.
seq 1 1 : 
  (={inp, out, l} /\ ={NOH.mp, NOH.red_inps} /\
   ! mem l{1} inp{1}); first auto; smt(memE).
wp; sp.
while
  (={inp, l} /\ ! mem l{1} inp{1} /\
   ={NOH.red_inps} /\
   NOH.mp{1}.[inp{1} <- out{1}] = NOH.mp{2}).
auto; progress;
  [smt(mem_drop) |
   rewrite 2!set_setE; smt(mem_ne_list_drop1)].
auto; progress; by rewrite 2!get_set_sameE oget_some.
qed.

(* lemma for using iters_perm *)

local lemma iter_perm2 :
  equiv
  [Iter(NOH.I).iter_12 ~ Iter(NOH.I).iter_21 :
   ={glob NOH.I, t1, t2} ==> ={glob NOH.I}].
proof.
proc => /=; inline*; sp.
case (t1{1} = t2{1}); first auto.
swap 3 -2; swap{1} 4 -1; swap{2} 4 -2.
auto; progress; rewrite set_setE /#.
qed.

local lemma NOH_rehash_red_inps_rslt_rehash_red_inps_addl_after :
  equiv
  [NOH.rehash_red_inps_rslt ~ NOH.rehash_red_inps_addl_after :
   ={inp, NOH.mp} /\ ! mem NOH.red_inps{2} inp{1} /\
   NOH.red_inps{1} = NOH.red_inps{2} `|` fset1 inp{1} ==>
   ={res, NOH.mp}].
proof.
proc; inline NOH.rehash_red_inps; wp 1 3.
conseq (_ : _ ==> ={NOH.mp}) => //.
transitivity*{2}
  { Iter(NOH.I).iters(elems NOH.red_inps, [inp]); } => //.
symmetry.
call (iters_perm NOH.I iter_perm2).
auto; progress.
rewrite setUE elems_fset1.
have {1}<- :
  undup(elems NOH.red_inps{1} ++ [inp{1}]) =
  elems NOH.red_inps{1} ++ [inp{1}]
  by rewrite undup_id 1:cat_uniq 1:uniq_elems /= 1:-memE.
rewrite FSet.oflistK.
inline Iter(NOH.I).iters; inline{1} (2) Iter(NOH.I).iter.
seq 4 1 : (={inp, NOH.mp, NOH.red_inps} /\ l{1} = [inp{1}]).
sp; wp.
call (_ : ={glob NOH.I}); first sim.
auto.
rcondt{1} 1; first auto.
inline{1} (1) NOH.I.f.
seq 4 2 : (={NOH.mp} /\ l{1} = []); first auto.
rcondf{1} 1; auto.
qed.

local lemma NOH_rehash_red_inps_rslt_rehash_red_inps :
  equiv
  [NOH.rehash_red_inps_rslt ~ NOH.rehash_red_inps :
   ={NOH.mp, NOH.red_inps} ==> ={NOH.mp, NOH.red_inps}].
proof.
proc*; inline NOH.rehash_red_inps_rslt; wp; sp.
call (_ : ={NOH.mp, NOH.red_inps}); first sim.
auto.
qed.

(* now we use the eager tactics: *)

local lemma eager_hash :
  eager
  [NOH.rehash_red_inps();, NOH.hash ~
   OH.hash, NOH.rehash_red_inps(); :
   ={inp} /\ ={NOH.mp, NOH.red_inps} ==>
   ={res} /\ ={NOH.mp, NOH.red_inps}].
proof.
eager proc.
case (mem NOH.red_inps{1} inp{1}).
rcondt{2} 1; first auto; smt().
rcondf{1} 2; first auto; call (NOH_rehash_red_inps_red_dom inp{m}); auto.
swap{1} 2 1. swap{2} 3 -2. wp 2 5; sp; elim* => red_inps_R.
conseq
  (_ :
   ={inp} /\ ={NOH.mp} /\ ! mem NOH.red_inps{2} inp{1} /\
   NOH.red_inps{1} = NOH.red_inps{2} `|` fset1 inp{1} ==>
   ={result} /\ ={NOH.mp}) => //.
progress;
  [smt(in_fsetD1) |
   rewrite fsetP; smt(in_fsetU1 in_fsetU in_fsetD1 in_fset1)].
transitivity{1}
  { result <@ NOH.rehash_red_inps_rslt(inp); }
  (={inp, NOH.mp, NOH.red_inps} ==> ={result, NOH.mp, NOH.red_inps})
  (={inp} /\ ={NOH.mp} /\ ! mem NOH.red_inps{2} inp{1} /\
   NOH.red_inps{1} = NOH.red_inps{2} `|` fset1 inp{1} ==>
   ={result} /\ ={NOH.mp}) => //.
progress; by exists NOH.mp{2} (NOH.red_inps{2} `|` fset1 inp{2}) inp{2}.
inline NOH.rehash_red_inps_rslt; sim.
transitivity{1}
  { result <@ NOH.rehash_red_inps_addl_after(inp); }
  (={inp, NOH.mp} /\
   ! mem NOH.red_inps{2} inp{1} /\
   NOH.red_inps{1} = NOH.red_inps{2} `|` fset1 inp{1} ==>
   ={result} /\ ={mp}(NOH, NOH))
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\
   ! mem NOH.red_inps{2} inp{1} ==>
   ={result} /\ ={NOH.mp}) => //.
progress; by exists NOH.mp{2} NOH.red_inps{2} inp{2}.
call NOH_rehash_red_inps_rslt_rehash_red_inps_addl_after; auto.
transitivity{2}
  { result <@ OH.rehash_red_inps_addl_before(inp); }
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp{1} ==>
   ={result} /\ ={NOH.mp})
  (={inp, NOH.mp, NOH.red_inps} ==> ={result, NOH.mp}) => //.
progress; by exists NOH.mp{2} NOH.red_inps{2} inp{2}.
call NOH_OH_rehash_red_inps_addl_not_red; auto.
inline OH.rehash_red_inps_addl_before; sim.
(* second case: ! mem NOH.red_inps{1} inp{1} *)
case (! dom NOH.mp{1} inp{1}).
rcondt{2} 1; first auto; smt().
rcondt{1} 2;
  first auto; call (NOH_rehash_red_inps_not_red_not_dom inp{m}); auto.
swap{2} 3 -2.
seq 0 1 :
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp{1}).
auto; progress.
rewrite fsetP => inp; smt(in_fsetD1).
transitivity{1}
  { result <@ NOH.rehash_red_inps_addl_after(inp); }
  (={inp, NOH.mp, NOH.red_inps} ==> ={result, NOH.mp, NOH.red_inps})
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp{1} ==>
   ={result} /\ ={NOH.mp, NOH.red_inps}) => //.
progress; by exists NOH.mp{2} NOH.red_inps{2} inp{2}.
inline NOH.rehash_red_inps_addl_after; sim.
transitivity{2}
  { result <@ OH.rehash_red_inps_addl_before(inp); }
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp{1} ==>
   ={result} /\ ={NOH.mp, NOH.red_inps})
  (={inp, NOH.mp, NOH.red_inps} ==> ={result, NOH.mp, NOH.red_inps}) => //.
progress; exists NOH.mp{2} NOH.red_inps{2} inp{2}.
progress; by exists NOH.mp{2} NOH.red_inps{2} inp{2}.
call NOH_OH_rehash_red_inps_addl_not_red; auto.
inline OH.rehash_red_inps_addl_before; sim.
(* second subcase: mem (dom NOH.mp{1}) inp{1} *)
rcondf{2} 1; first auto; smt().
rcondf{1} 2; first auto; call (NOH_rehash_red_inps_pres_dom inp{m}); auto.
wp; sp.
exists* inp{1}, result{2}; elim* => inp' out'.
call (NOH_OH_rehash_red_inps_not_red_pres inp' out').
auto; progress.
by rewrite some_oget 1:-domE.
by rewrite H3 oget_some.
by rewrite minus1_not_mem.
qed.

local lemma eager_rhash :
  eager
  [NOH.rehash_red_inps();, NOH.rhash ~
   OH.rhash, NOH.rehash_red_inps(); :
   ={inp} /\ ={NOH.mp, NOH.red_inps} ==>
   ={res} /\ ={NOH.mp, NOH.red_inps}].
proof.
eager proc.
case (mem NOH.red_inps{1} inp{1}).
seq 0 1 :
  (={inp} /\ ={NOH.mp, NOH.red_inps} /\ mem NOH.red_inps{1} inp{1}).
if{2} => //.
auto; progress.
rewrite fsetUC subset_fsetU_id //.
move => x; by rewrite in_fset1.
rcondf{1} 2; auto.
call{1} (NOH_rehash_red_inps_red_dom inp{m}); auto.
sim.
(* second case: ! mem NOH.red_inps{1} inp{1} *)
case (dom NOH.mp{1} inp{1}).
rcondf{2} 1; first auto. rcondf{1} 2; auto.
call (NOH_rehash_red_inps_pres_dom inp{m}); auto.
sim.
(* second subcase: ! dom NOH.mp{1} inp{1} *)
rcondt{2} 1; first auto. rcondt{1} 2; first auto.
call (NOH_rehash_red_inps_not_red_not_dom inp{m}); auto.
wp 3 2; sp; elim* => red_inps_R.
conseq
  (_ :
   ={inp} /\ ={NOH.mp} /\ ! mem NOH.red_inps{1} inp{1} /\
   NOH.red_inps{1} `|` fset1 inp{1} = NOH.red_inps{2} ==>
   ={NOH.mp}) => //.
transitivity{1}
  { out <@ NOH.rehash_red_inps_addl_after(inp); }
  (={inp, NOH.mp, NOH.red_inps} /\ ! mem NOH.red_inps{1} inp{1} ==>
   ={out, NOH.mp})
  (={inp} /\ ={NOH.mp} /\ ! mem NOH.red_inps{1} inp{1} /\
   NOH.red_inps{1} `|` fset1 inp{1} = NOH.red_inps{2} ==>
   ={NOH.mp}) => //.
progress; by exists NOH.mp{2} NOH.red_inps{1} inp{2}.
inline NOH.rehash_red_inps_addl_after; sp; wp; rnd.
call (_ : ={NOH.mp, NOH.red_inps}); first sim.
skip; progress; by rewrite get_set_sameE.
transitivity{1}
  { out <@ NOH.rehash_red_inps_rslt(inp); }
  (={inp, NOH.mp} /\ ! mem NOH.red_inps{1} inp{1} /\
   NOH.red_inps{1} `|` fset1 inp{1} = NOH.red_inps{2} ==>
   ={NOH.mp})
  (={inp} /\ ={NOH.mp, NOH.red_inps} ==> ={NOH.mp}) => //.
progress; by exists NOH.mp{2} (NOH.red_inps{1} `|` fset1 inp{2}) inp{2}.
symmetry.
call NOH_rehash_red_inps_rslt_rehash_red_inps_addl_after; auto.
call NOH_rehash_red_inps_rslt_rehash_red_inps; auto.
qed.

(* now we use eager_hash and eager_rhash to prove: *)

local lemma eager_hashing_adv :
  eager
  [NOH.rehash_red_inps();, HashAdv(NOH).main ~
   HashAdv(OH).main, NOH.rehash_red_inps(); :
   ={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} ==>
   ={res} /\ ={NOH.mp, NOH.red_inps}].
proof.
eager proc (={NOH.mp, NOH.red_inps}) => //; try sim.
apply eager_hash.
apply eager_rhash.
qed.

(* finish the middle step: *)

local lemma GNOH_GOH &m :
  Pr[GNOH.main() @ &m : res] = Pr[GOH.main() @ &m : res].
proof.
byequiv => //; proc.
seq 1 1 :
  (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} /\
   NOH.red_inps{1} = fset0).
inline*; auto.
transitivity{1}
 { NOH.rehash_red_inps(); b <@ GNOH.HA.main(); }
 (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} /\
  NOH.red_inps{1} = fset0 ==>
  ={b})
 (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} ==> ={b}) => //.
progress; by exists (glob HashAdv){2} NOH.mp{2} fset0.
seq 0 1 : (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps}).
exists* NOH.mp{2}; elim* => mp'.
call{2} (NOH_rehash_red_inps_empty_preserves_map mp'); auto.
sim.
transitivity{2}
 { b <@ GOH.HA.main(); NOH.rehash_red_inps(); }
 (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} ==> ={b})
 (={glob HashAdv} /\ ={NOH.mp, NOH.red_inps} ==> ={b}) => //.
progress; by exists (glob HashAdv){2} NOH.mp{2} NOH.red_inps{2}.
eager call eager_hashing_adv; auto.
call{1} NOH_rehash_red_inps_ll.
sim.
qed.

(* putting it all together *)

lemma GNonOptHashing_GOH &m :
  Pr[GNonOptHashing(HashAdv).main() @ &m : res] =
  Pr[GOptHashing(HashAdv).main() @ &m : res].
proof.
by rewrite (GNonOptHashing_GNOH &m)
           (GNOH_GOH &m)
           (GOH_GOptHashing &m).
qed.

end section.

lemma GNonOptHashing_GOptHashing
      (HashAdv <: HASHING_ADV{-NonOptHashing, -OptHashing}) &m :
    Pr[GNonOptHashing(HashAdv).main() @ &m : res] =
    Pr[GOptHashing(HashAdv).main() @ &m : res].
proof. apply (GNonOptHashing_GOH HashAdv &m). qed.
